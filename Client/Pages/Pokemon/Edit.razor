@page "/pokemon/edit/{PokemonId:int}"
@using TrainerPokedex.Shared.Models.Pokemon
@using Microsoft.AspNetCore.Authorization
@using System.Collections
@using TrainerPokedex.Shared.Models.Move
@using TrainerPokedex.Shared.Models.Region
@using TrainerPokedex.Shared.Models.Type
@inject HttpClient _http
@attribute [Authorize]
@inject NavigationManager _navigation
@using Syncfusion.Blazor.DropDowns
<h3>Edit a Pokemon</h3>
@if (_errorMessage != null)
{
    <h5 class="text-danger">@_errorMessage</h5>
}
<div class="container">
    <EditForm Model="@_model" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="_model.Name"/>
        </div>
        <div class="form-group">
            <label>Pokedex #</label>
            <InputNumber class="form-control" @bind-Value="_model.DexNumber"/>
        </div>
        <div class="form-group">
            <label>Generation</label>
            <InputNumber class="form-control" @bind-Value="_model.Generation"/>
        </div>
        <div class="form-group">
            <label>Image Url</label>
            <InputText class="form-control" @bind-Value="_model.ImgUrl"/>
        </div>
        <div class="form-group">
            <label>Pokedex Entry</label>
            <InputTextArea class="form-control" @bind-Value="_model.DexEntry"/>
        </div>
        @*2 Type selection dropdowns, one being optional*@
        <div class="form-group">
            <label>Types</label>
            <SfMultiSelect @bind-Value="@_model.TypeIds" AllowFiltering="true" Placeholder="Select at most 2 types" Mode="VisualMode.CheckBox" MaximumSelectionLength="2" ShowDropDownIcon="true" DataSource="@_types">
            <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
        </SfMultiSelect>
        </div>
        @*Move selection, text entry with auto fill, asks to make move first if not found.*@
        <div class="form-group">
            <label>Learnable moves</label>
            <SfMultiSelect @bind-Value="@_model.MoveIds" AllowFiltering="true" Placeholder="Select moves" Mode="VisualMode.CheckBox" ShowDropDownIcon="true" DataSource="@_moves">
            <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
        </SfMultiSelect>
        </div>
        @*Region selection, dropdowns, button next to it saying add more regions?*@
        <div class="form-group">
            <label>Regions found</label>
            <SfMultiSelect @bind-Value="@_model.RegionIds" AllowFiltering="true" Placeholder="Select regions" Mode="VisualMode.CheckBox" ShowDropDownIcon="true" DataSource="@_regions">
            <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
        </SfMultiSelect>
        </div>
        <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
    </EditForm>
</div>

@code {
    [Parameter]public int PokemonId { get; set; }
    private PokemonEdit _model { get; set; }
    private List<TypeListItem> _types;
    private List<MoveListItem> _moves;
    private List<RegionListItem> _regions;
    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        _model = await _http.GetFromJsonAsync<PokemonEdit>($"/api/pokemon/{PokemonId}");
        _types = await _http.GetFromJsonAsync<List<TypeListItem>>("api/type");
        _moves = await _http.GetFromJsonAsync<List<MoveListItem>>("api/move");
        _regions = await _http.GetFromJsonAsync<List<RegionListItem>>("api/region");
    }

    private async void HandleSubmit()
    {
        var createRes = await _http.PutAsJsonAsync<PokemonEdit>($"/api/pokemon/edit/{PokemonId}", _model);
        if (createRes.IsSuccessStatusCode)
            _navigation.NavigateTo($"/pokemon/{PokemonId}");
        else _errorMessage = "Could not edit Pokemon. Try again later.";
    }

}