@page "/type/{TypeId:int}"
@using TrainerPokedex.Shared.Models.Type
@using TrainerPokedex.Shared.Models.Pokemon
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient _http
@if (Type != null)
{
    <h3>@Type.Name Type Details</h3>
    <div class="container">
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <span>@Type.Name</span>
            </div>
            <div class="card-body">
                <h4 class="card-title">Pokemon</h4>
                <p class="card-text">
                    @foreach (var pokemon in Type.Pokemon)
                    {
                        <a href=@($"pokemon/{pokemon.Id}")>@pokemon.Name</a>
                        <br/>
                    }
                </p>
            </div>
            <div class="card-body">
                <h4 class="card-title">Moves</h4>
                <p class="card-text">
                    @foreach (var move in Type.Moves)
                    {
                        <a href=@($"move/{move.Id}")>@move.Name</a>
                        <br/>
                    }
                </p>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            <div class="text-center justify-content-between w-25">
                <a href=@($"/Type/edit/{TypeId}") class="btn btn-outline-primary">Edit</a>
                <a href=@($"/Type/delete/{TypeId}") class="btn btn-outline-danger">Delete</a>
                <hr/>
                <a href="/Type">Back to Type Index</a>
            </div>
        </div>
    </div>
}
else
{
    <p>
        <em>Loading...</em>
    </p>
}

@code {

    [Parameter]
    public int TypeId { get; set; } = new();

    private TypeDetail Type { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Type = await _http.GetFromJsonAsync<TypeDetail>($"/api/Type/{TypeId}");
    }

}